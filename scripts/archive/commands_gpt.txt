existing database
1. songs table
    song_id TEXT PRIMARY KEY,
    song_name TEXT,
    artist_ids TEXT,
    acousticness REAL,
    danceability REAL,
    energy REAL,
    instrumentalness REAL,
    key INTEGER,
    liveness REAL,
    loudness REAL,
    mode INTEGER,
    speechiness REAL,
    tempo REAL,
    time_signature INTEGER,
    valence REAL
2. playlists table
    playlist_id TEXT PRIMARY KEY,
    playlist_creator_id TEXT,
    playlist_original_items INTEGER,
    playlist_items_fetched INTEGER,
    playlist_top_artist_ids TEXT,
    playlist_top_genres TEXT,
    playlist_items TEXT,
    min_acousticness REAL,
    max_acousticness REAL,
    min_danceability REAL,
    max_danceability REAL,
    min_energy REAL,
    max_energy REAL,
    min_instrumentalness REAL,
    max_instrumentalness REAL,
    min_key INTEGER,
    max_key INTEGER,
    min_liveness REAL,
    max_liveness REAL,
    min_loudness REAL,
    max_loudness REAL,
    min_mode INTEGER,
    max_mode INTEGER,
    min_speechiness REAL,
    max_speechiness REAL,
    min_tempo REAL,
    max_tempo REAL,
    min_time_signature INTEGER,
    max_time_signature INTEGER,
    min_valence REAL,
    max_valence REAL
3. artists table
    artist_id TEXT PRIMARY KEY,
    artist_name TEXT,
    artist_genres TEXT

OUTPUT FORMAT
Case: 
- 1,2,3,4,5 artist id is on same playlist
- 3,4,5 artist id is on same playlist
- 6 does not have common playlist
- 7 does not have common playlist

INPUTTED IDS (Inputted IDS)
1. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
2. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
3. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
4. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
5. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
6. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
7. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres

PLAYLIST CATEGORY (1,2,3,4,5): {array of artists id} (Category Playlist that contains artists of inputted ids)
1. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | 88 songs from this playlist
2. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | 22 songs from this playlist

PLAYLIST CATEGORY: (6) {array of artist id} (Category Playlist that contains artists of inputted ids)
1. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | 63 songs from this playlist
2. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | 1 songs from this playlist

PLAYLIST CATEGORY: (7) {array of artist id} (Category Playlist that contains artists of inputted ids)
1. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | 1 songs from this playlist
2. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | 6 songs from this playlist

SONGS (Recommend Other Artist is in the playlists_result other than Inputted IDS artist)
1. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres | Count: {N} | From:  {array of playlist id that contains this songs}
2. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres | Count: {N} | From:  {array of playlist id that contains this songs}

import sqlite3
import configparser
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from spotipy.exceptions import SpotifyException
import time
from collections import Counter

# Load configuration
config = configparser.ConfigParser()
config.read('config.cfg')

DB = config['rs']['db_path']
CLIENT_ID = config['api']['client_id']
CLIENT_SECRET = config['api']['client_secret']
DELAY_TIME = float(config['api']['delay_time'])
N_MINIMUM = int(config['rs']['n_minimum_playlist_songs'])
N_SCRAPE = int(config['rs']['n_scrape'])
OUTPUT_PATH = int(config['rs']['cf_output'])

# Spotify API credentials
client_credentials_manager = SpotifyClientCredentials(
    client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

# Connect to SQLite database
conn = sqlite3.connect(DB)
cursor = conn.cursor()

#add procedural function here if needed

cf():
    # main function to print result to OUTPUT_PATH (.txt with utf-8 encoding)

if __name__ == "__main__":
    ids = [
        '1BxfuPKGuaTgP7aM0Bbdwr',
        '4xqrdfXkTW4T0RauPLv3WA',
        '7JIuqL4ZqkpfGKQhYlrirs',
        '5dTHtzHFPyi8TlTtzoz1J9',
        '4cluDES4hQEUhmXj6TXkSo',
        '4ZtFanR9U6ndgddUvNcjcG',
        '2QjOHCTQ1Jl3zawyYOpxh6',
        '0nJW01T7XtvILxQgC5J7Wh',
        '7nQoDLkzCcoIpKPQt3eCdN',
        '72MEldEAmz3WMJ2MkII3kP',
    ]
    cf(ids)
