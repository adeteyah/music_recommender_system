existing database
1. songs table
    song_id TEXT PRIMARY KEY,
    song_name TEXT,
    artist_ids TEXT,
    acousticness REAL,
    danceability REAL,
    energy REAL,
    instrumentalness REAL,
    key INTEGER,
    liveness REAL,
    loudness REAL,
    mode INTEGER,
    speechiness REAL,
    tempo REAL,
    time_signature INTEGER,
    valence REAL
2. playlists table
    playlist_id TEXT PRIMARY KEY,
    playlist_creator_id TEXT,
    playlist_original_items INTEGER,
    playlist_items_fetched INTEGER,
    playlist_top_artist_ids TEXT,
    playlist_top_genres TEXT,
    playlist_items TEXT,
    min_acousticness REAL,
    max_acousticness REAL,
    min_danceability REAL,
    max_danceability REAL,
    min_energy REAL,
    max_energy REAL,
    min_instrumentalness REAL,
    max_instrumentalness REAL,
    min_key INTEGER,
    max_key INTEGER,
    min_liveness REAL,
    max_liveness REAL,
    min_loudness REAL,
    max_loudness REAL,
    min_mode INTEGER,
    max_mode INTEGER,
    min_speechiness REAL,
    max_speechiness REAL,
    min_tempo REAL,
    max_tempo REAL,
    min_time_signature INTEGER,
    max_time_signature INTEGER,
    min_valence REAL,
    max_valence REAL
3. artists table
    artist_id TEXT PRIMARY KEY,
    artist_name TEXT,
    artist_genres TEXT

-- CF --
existing database
1. songs table
    song_id TEXT PRIMARY KEY,
    song_name TEXT,
    artist_ids TEXT,
2. playlists table
    playlist_id TEXT PRIMARY KEY,
    playlist_creator_id TEXT,
    playlist_top_genres TEXT,
    playlist_items TEXT, (array of song_id)
3. artists table
    artist_id TEXT PRIMARY KEY,
    artist_name TEXT,
    artist_genres TEXT (genres)

OUTPUT FORMAT
INPUTTED IDS (Inputted IDS are song_id)
1. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
2. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
3. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
4. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
5. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
6. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres
7. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres

PLAYLIST CATEGORY (1,2,3,4,5<-array of playlist_id that has artist_id from inputted ids): {array of artists id} (Category Playlist that contains artists of inputted ids)
1. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | Genres: {playlist_top_genres} | 88 songs from this playlist <- count how many songs in this playlist is filtered to the SONGS
2. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | Genres: {playlist_top_genres} | 22 songs from this playlist

PLAYLIST CATEGORY: (6) {array of artist id} (Category Playlist that contains artists of inputted ids)
1. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | Genres: {playlist_top_genres} | 63 songs from this playlist
2. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | Genres: {playlist_top_genres} | 1 songs from this playlist

PLAYLIST CATEGORY: (7) {array of artist id} (Category Playlist that contains artists of inputted ids)
1. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | Genres: {playlist_top_genres} | 1 songs from this playlist
2. https://open.spotify.com/playlist/playlist_id - https://open.spotify.com/user/Creator_ID | Genres: {playlist_top_genres} | 6 songs from this playlist

SONGS (Print songs from all playlists_result other than artist_id from the inputted ids)
1. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres | Count: {N <- count this song show up in playlists from PLAYLIST CATEGORY} | From:  {array of playlist id that contains this songs}
2. https://open.spotify.com/track/song_id artist_name - song_name | Genre: artist_genres | Count: {N <- count this song show up in playlists from PLAYLIST CATEGORY} | From:  {array of playlist id that contains this songs}

import sqlite3
import configparser

# Read configuration file
config = configparser.ConfigParser()
config.read('config.cfg')

MODEL = 'Collaborative Filtering'
DB = config['rs']['db_path']
OUTPUT_PATH = config['rs']['cbf_output']
N_RESULT = int(config['rs']['cbf_n_result'])

def get_song_info(conn, song_id):
    cursor = conn.cursor()
    cursor.execute("""
        SELECT s.song_id, s.song_name, s.artist_ids, a.artist_name, a.artist_genres
        FROM songs s
        JOIN artists a ON s.artist_ids = a.artist_id
        WHERE s.song_id = ?
    """, (song_id,))
    return cursor.fetchone()

#add procedural function here if needed

cf():
    conn = sqlite3.connect(DB)
    songs_info = read_inputted_ids(ids, conn)
    inputted_ids = set(id for id, *_ in songs_info)

    # print result to OUTPUT_PATH (.txt with utf-8 encoding)

    conn.close()
    print('Result for', MODEL, 'stored at', OUTPUT_PATH)
if __name__ == "__main__":
    ids = [
        '1BxfuPKGuaTgP7aM0Bbdwr',
        '4xqrdfXkTW4T0RauPLv3WA',
        '7JIuqL4ZqkpfGKQhYlrirs',
        '5dTHtzHFPyi8TlTtzoz1J9',
        '4cluDES4hQEUhmXj6TXkSo',
        '4ZtFanR9U6ndgddUvNcjcG',
        '2QjOHCTQ1Jl3zawyYOpxh6',
        '0nJW01T7XtvILxQgC5J7Wh',
        '7nQoDLkzCcoIpKPQt3eCdN',
        '72MEldEAmz3WMJ2MkII3kP',
    ]
    cf(ids)

-- CBF --
existing database
1. songs table
    song_id TEXT PRIMARY KEY,
    song_name TEXT,
    artist_ids TEXT,
    acousticness REAL,
    danceability REAL,
    energy REAL,
    instrumentalness REAL,
    key INTEGER,
    liveness REAL,
    loudness REAL,
    mode INTEGER,
    speechiness REAL,
    tempo REAL,
    time_signature INTEGER,
    valence REAL
2. playlists table
    playlist_id TEXT PRIMARY KEY,
    playlist_creator_id TEXT,
    playlist_top_genres TEXT,
    playlist_items TEXT, (array of song_id)
3. artists table
    artist_id TEXT PRIMARY KEY,
    artist_name TEXT,
    artist_genres TEXT (genres)

OUTPUT FORMAT
INPUTTED IDS (Inputted IDS are song_id)
1. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
2. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
3. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
4. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
5. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
6. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
7. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more
continue my code to print desired output
import sqlite3
import configparser

# Read configuration file
config = configparser.ConfigParser()
config.read('config.cfg')

MODEL = 'Content-based Filtering'
DB = config['rs']['db_path']
OUTPUT_PATH = config['rs']['cbf_output']
N_RESULT = int(config['rs']['cbf_n_result'])

def get_song_info(conn, song_id):
    cursor = conn.cursor()
    cursor.execute("""
        SELECT s.song_id, s.song_name, s.artist_ids, a.artist_name, a.artist_genres
        FROM songs s
        JOIN artists a ON s.artist_ids = a.artist_id
        WHERE s.song_id = ?
    """, (song_id,))
    return cursor.fetchone()

#add procedural function here if needed

cbf():
    conn = sqlite3.connect(DB)
    songs_info = read_inputted_ids(ids, conn)
    inputted_ids = set(id for id, *_ in songs_info)

    # print result to OUTPUT_PATH (.txt with utf-8 encoding)
    
    conn.close()
    print('Result for', MODEL, 'stored at', OUTPUT_PATH)
if __name__ == "__main__":
    ids = [
        '1BxfuPKGuaTgP7aM0Bbdwr',
        '4xqrdfXkTW4T0RauPLv3WA',
        '7JIuqL4ZqkpfGKQhYlrirs',
        '5dTHtzHFPyi8TlTtzoz1J9',
    ]
    cbf(ids)

-- CBF CF --
existing database
1. songs table
    song_id TEXT PRIMARY KEY,
    song_name TEXT,
    artist_ids TEXT,
2. playlists table
    playlist_id TEXT PRIMARY KEY,
    playlist_creator_id TEXT,
    playlist_top_genres TEXT,
    playlist_items TEXT, (array of song_id)
3. artists table
    artist_id TEXT PRIMARY KEY,
    artist_name TEXT,
    artist_genres TEXT (genres)

add new section after SIMILAR AUDIO FEATURES called "COLLECTING SIMILAR SONG PLAYLIST"
1. continue format from SIMILAR AUDIO FEATURES, collect similar songs
2. find playlists that has similar song id in column playlist_items
3. print playlist_id and Creator_ID | playlist_top_genres

import sqlite3
import configparser

# Read configuration file
config = configparser.ConfigParser()
config.read('config.cfg')

MODEL = 'Content-based Filtering - Collaborative Filtering'
DB = config['rs']['db_path']
OUTPUT_PATH = config['rs']['cbf_cf_output']
N_RESULT = int(config['rs']['cbf_n_result'])
CBF_FEATURES = config['rs']['cbf_features'].split(', ')
REAL_BOUND_VAL = float(config['rs']['cbf_real_bound'])
INTEGER_BOUND_VAL = int(config['rs']['cbf_integer_bound'])

# Define which features are integers
INTEGER_FEATURES = {'tempo', 'time_signature', 'key', 'mode'}


def get_song_info(conn, song_id, features):
    features_sql = ', '.join(features)
    query = f"""
        SELECT s.song_id, s.song_name, s.artist_ids, a.artist_name, a.artist_genres,
               {features_sql}
        FROM songs s
        JOIN artists a ON s.artist_ids = a.artist_id
        WHERE s.song_id = ?
    """
    cursor = conn.cursor()
    cursor.execute(query, (song_id,))
    return cursor.fetchone()


def read_inputted_ids(ids, conn, features):
    song_info_list = []
    for song_id in ids:
        song_info = get_song_info(conn, song_id, features)
        if song_info:
            song_info_list.append(song_info)
    return song_info_list


def calculate_similarity(song_features, input_features):
    return sum(abs(song_feature - input_feature) for song_feature, input_feature in zip(song_features, input_features))


def get_similar_audio_features(conn, features, input_audio_features, inputted_ids, inputted_songs):
    feature_conditions = []
    for i, feature in enumerate(features):
        feature_name = feature.split('.')[-1]
        lower_bound = input_audio_features[i] - \
            REAL_BOUND_VAL if feature_name not in INTEGER_FEATURES else input_audio_features[
                i] - INTEGER_BOUND_VAL
        upper_bound = input_audio_features[i] + \
            REAL_BOUND_VAL if feature_name not in INTEGER_FEATURES else input_audio_features[
                i] + INTEGER_BOUND_VAL
        feature_conditions.append(f"{feature_name} BETWEEN {
                                  lower_bound} AND {upper_bound}")
    conditions_sql = ' AND '.join(feature_conditions)

    features_sql = ', '.join(features)
    query = f"""
        SELECT s.song_id, s.song_name, s.artist_ids, a.artist_name, a.artist_genres,
               {features_sql}
        FROM songs s
        JOIN artists a ON s.artist_ids = a.artist_id
        WHERE {conditions_sql}
    """
    cursor = conn.cursor()
    cursor.execute(query)
    songs = cursor.fetchall()

    # Filter out inputted IDs and ensure only one song per artist, excluding same artist and song names
    filtered_songs = []
    seen_artists = set()
    seen_song_artist_names = {(info[3], info[1]) for info in inputted_songs}
    for song in songs:
        if song[0] in inputted_ids or (song[3], song[1]) in seen_song_artist_names:
            continue
        artist_id = song[2]
        if artist_id in seen_artists:
            continue
        seen_artists.add(artist_id)
        filtered_songs.append(song)

    # Sort songs by similarity
    filtered_songs.sort(key=lambda song: calculate_similarity(
        song[5:], input_audio_features))
    return filtered_songs


def cbf_cf(ids):
    conn = sqlite3.connect(DB)
    features = ['s.' + feature for feature in CBF_FEATURES]
    songs_info = read_inputted_ids(ids, conn, features)

    with open(OUTPUT_PATH, 'w', encoding='utf-8') as f:
        f.write('INPUTTED IDS\n')
        input_audio_features_list = []
        inputted_ids_set = set(ids)
        song_headers = []
        for idx, song_info in enumerate(songs_info, start=1):
            # song_id, song_name, artist_ids, artist_name, artist_genres
            base_info = song_info[:5]
            audio_features = song_info[5:]
            input_audio_features_list.append(audio_features)
            song_headers.append(
                f"{song_info[3]} - {song_info[1]} | Genres: {song_info[4]}")

            song_id, song_name, artist_ids, artist_name, artist_genres = base_info
            song_url = f"https://open.spotify.com/track/{song_id}"
            features_str = ', '.join(
                [f"{CBF_FEATURES[i]}: {audio_features[i]}" for i in range(len(audio_features))])

            line = (f"{idx}. {song_url} {artist_name} - {song_name} | "
                    f"Genres: {artist_genres} | "
                    f"{features_str}\n")
            f.write(line)

        # SIMILAR AUDIO FEATURES
        f.write('\nSIMILAR AUDIO FEATURES\n')
        for input_audio_features, header in zip(input_audio_features_list, song_headers):
            f.write(f"\n{header}\n")
            similar_songs_info = get_similar_audio_features(
                conn, features, input_audio_features, inputted_ids_set, songs_info)
            for idx, song_info in enumerate(similar_songs_info[:N_RESULT], start=1):
                # song_id, song_name, artist_ids, artist_name, artist_genres
                base_info = song_info[:5]
                audio_features = song_info[5:]

                song_id, song_name, artist_ids, artist_name, artist_genres = base_info
                song_url = f"https://open.spotify.com/track/{song_id}"
                features_str = ', '.join(
                    [f"{CBF_FEATURES[i]}: {audio_features[i]}" for i in range(len(audio_features))])

                line = (f"{idx}. {song_url} {artist_name} - {song_name} | "
                        f"Genres: {artist_genres} | "
                        f"{features_str}\n")
                f.write(line)

    conn.close()
    print('Result for', MODEL, 'stored at', OUTPUT_PATH)


if __name__ == "__main__":
    ids = [
        '1BxfuPKGuaTgP7aM0Bbdwr',
        '4xqrdfXkTW4T0RauPLv3WA',
        '7JIuqL4ZqkpfGKQhYlrirs',
        '5dTHtzHFPyi8TlTtzoz1J9',
    ]
    cbf_cf(ids)

-- CF CBF --
1. songs table
    song_id TEXT PRIMARY KEY,
    song_name TEXT,
    artist_ids TEXT,
    acousticness REAL,
    danceability REAL,
    energy REAL,
    instrumentalness REAL,
    key INTEGER,
    liveness REAL,
    loudness REAL,
    mode INTEGER,
    speechiness REAL,
    tempo REAL,
    time_signature INTEGER,
    valence REAL
2. playlists table
    playlist_id TEXT PRIMARY KEY,
    playlist_creator_id TEXT,
    playlist_top_genres TEXT,
    playlist_items TEXT, (array of song_id)
3. artists table
    artist_id TEXT PRIMARY KEY,
    artist_name TEXT,
    artist_genres TEXT (genres)

create new section after SONGS FROM CATEGORIZED PLAYLISTS keep structure same like SONGS FROM CATEGORIZED PLAYLISTS but add audio features to the end of each songs
1. https://open.spotify.com/track/song_id artist_name - song_name | acousticness: 0, and more

import sqlite3
import configparser
from collections import defaultdict, Counter

# Read configuration file
config = configparser.ConfigParser()
config.read('config.cfg')

MODEL = 'Collaborative Filtering - Content-based Filtering'
DB = config['rs']['db_path']
OUTPUT_PATH = config['rs']['cf_cbf_output']


def get_song_info(conn, song_id):
    cursor = conn.cursor()
    cursor.execute("""
        SELECT s.song_id, s.song_name, s.artist_ids, a.artist_name, a.artist_genres
        FROM songs s
        JOIN artists a ON s.artist_ids = a.artist_id
        WHERE s.song_id = ?
    """, (song_id,))
    return cursor.fetchone()


def read_inputted_ids(ids, conn):
    songs_info = []
    for song_id in ids:
        info = get_song_info(conn, song_id)
        if info:
            songs_info.append(info)
    return songs_info


def get_related_playlists(conn, inputted_ids):
    cursor = conn.cursor()
    cursor.execute("""
        SELECT p.playlist_id, p.playlist_creator_id, p.playlist_top_genres, p.playlist_items
        FROM playlists p
    """)
    playlists = cursor.fetchall()

    related_playlists = []
    for playlist in playlists:
        playlist_id, playlist_creator_id, playlist_top_genres, playlist_items = playlist
        # Assuming playlist_items is a comma-separated string of song_ids
        playlist_items_list = playlist_items.split(',')

        # Check if any inputted IDs are in the playlist
        if any(song_id in inputted_ids for song_id in playlist_items_list):
            artist_names = set()
            for song_id in playlist_items_list:
                cursor.execute("""
                    SELECT a.artist_name
                    FROM songs s
                    JOIN artists a ON s.artist_ids = a.artist_id
                    WHERE s.song_id = ?
                """, (song_id,))
                artist_info = cursor.fetchone()
                if artist_info:
                    artist_names.add(artist_info[0])

            related_playlists.append(
                (playlist_id, playlist_creator_id, playlist_top_genres, playlist_items_list, list(artist_names)))

    return related_playlists


def categorize_playlists(playlists, inputted_artists):
    artist_to_playlists = {artist: [] for artist in inputted_artists}

    for playlist_id, playlist_creator_id, playlist_top_genres, playlist_items, artist_names in playlists:
        for artist in artist_names:
            if artist in inputted_artists:
                artist_to_playlists[artist].append(
                    (playlist_id, playlist_creator_id, playlist_top_genres, playlist_items, artist_names))

    categorized_playlists = []
    for artist, playlists in artist_to_playlists.items():
        if playlists:  # Only include artists with related playlists
            # Remove duplicate playlists
            unique_playlists = {p[0]: p for p in playlists}.values()
            categorized_playlists.append((artist, list(unique_playlists)))

    return categorized_playlists


def extract_songs_from_playlists(categorized_playlists, conn, inputted_ids, inputted_songs):
    artist_song_count = defaultdict(Counter)
    inputted_songs_set = {(artist_name, song_name)
                          for _, song_name, _, artist_name, _ in inputted_songs}

    for artist, playlists in categorized_playlists:
        for playlist_id, playlist_creator_id, playlist_top_genres, playlist_items, artist_names in playlists:
            for song_id in playlist_items:
                song_info = get_song_info(conn, song_id)
                if song_info and song_id not in inputted_ids:
                    _, song_name, artist_ids, artist_name, _ = song_info
                    if (artist_name, song_name) not in inputted_songs_set:
                        artist_song_count[artist][(
                            song_id, artist_name, song_name)] += 1

    return artist_song_count


def format_artist_category(artist, songs_info):
    song_names = [song_name for _, song_name, _, artist_name,
                  _ in songs_info if artist_name == artist]
    if song_names:
        return f"{artist} - {song_names[0]}"
    return artist


def cf_cbf(ids):
    conn = sqlite3.connect(DB)
    songs_info = read_inputted_ids(ids, conn)
    inputted_ids = set(id for id, *_ in songs_info)
    inputted_artists = set(artist_name for _, _, _,
                           artist_name, _ in songs_info)
    related_playlists = get_related_playlists(conn, inputted_ids)
    categorized_playlists = categorize_playlists(
        related_playlists, inputted_artists)
    artist_song_count = extract_songs_from_playlists(
        categorized_playlists, conn, inputted_ids, songs_info)

    with open(OUTPUT_PATH, 'w', encoding='utf-8') as f:
        f.write('\nINPUTTED IDS\n')
        for idx, song_info in enumerate(songs_info, 1):
            song_id, song_name, artist_ids, artist_name, artist_genres = song_info
            output_line = f"{idx}. https://open.spotify.com/track/{song_id} {
                artist_name} - {song_name} | Genre: {artist_genres}"
            f.write(output_line + '\n')
        f.write('\nRELATED PLAYLISTS\n')
        for idx, playlist in enumerate(related_playlists, 1):
            playlist_id, playlist_creator_id, playlist_top_genres, playlist_items, artist_names = playlist
            playlist_items_str = ', '.join(playlist_items)
            # Ensure unique artist names
            artist_names_str = ', '.join(set(artist_names))
            output_line = f"{idx}. Playlist ID: {playlist_id}, Creator ID: {playlist_creator_id}, Top Genres: {
                playlist_top_genres}, Items: {playlist_items_str}, Artists: {artist_names_str}"
            f.write(output_line + '\n')

        f.write('\nCATEGORIZED PLAYLISTS\n')
        for artist, playlists in categorized_playlists:
            category_name = format_artist_category(artist, songs_info)
            f.write(f'{category_name}\n')
            unique_artists_written = set()
            for playlist in playlists:
                playlist_id, playlist_creator_id, playlist_top_genres, playlist_items, artist_names = playlist
                # Only show unique artists
                artist_names_str = ', '.join(
                    set(artist_names) - unique_artists_written)
                if artist_names_str:  # Only write if there's something to write
                    output_line = f"  - Playlist ID: {playlist_id}, Creator ID: {
                        playlist_creator_id}, Top Genres: {playlist_top_genres}, Artists: {artist_names_str}"
                    f.write(output_line + '\n')
                    # Mark these artists as written
                    unique_artists_written.update(artist_names)

        f.write('\nSONGS FROM CATEGORIZED PLAYLISTS\n')
        for artist, songs in artist_song_count.items():
            category_name = format_artist_category(artist, songs_info)
            f.write(f'{category_name}\n')
            sorted_songs = sorted(
                songs.items(), key=lambda x: x[1], reverse=True)
            unique_artists_written = set()
            for (song_id, artist_name, song_name), count in sorted_songs:
                if artist_name not in unique_artists_written:  # Only write unique artists
                    output_line = f"  - https://open.spotify.com/track/{
                        song_id} {artist_name} - {song_name} | Count: {count}"
                    f.write(output_line + '\n')
                    # Mark this artist as written
                    unique_artists_written.add(artist_name)

    conn.close()
    print('Result for', MODEL, 'stored at', OUTPUT_PATH)


if __name__ == "__main__":
    ids = [
        '1BxfuPKGuaTgP7aM0Bbdwr',
        '4xqrdfXkTW4T0RauPLv3WA',
        '7JIuqL4ZqkpfGKQhYlrirs',
    ]
    cf_cbf(ids)
